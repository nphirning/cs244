# BufferBloat (CS 244 Assignment 1)
Author: Nicholas Hirning (nhirning)

## Setup Instructions

 * Follow the instructions for assignment 1. Then execute `sudo run.sh`.

## Questions

 1. The difference in fetch times occurs because a large buffer sacrifices
    latency. This occurs because dropping a packet is actually a useful 
    signal that the network needs to receive in order to intelligently 
    adjust how many packets are in flight. For example, suppose that you 
    have a very large buffer and are sending packets currently so that the
    bottleneck link is always fully occupied, but the buffer is not filling
    up. As you receive ACKs, you will increase your cwnd and send more and
    more packets. Every rate increase will just increase the rate at which
    the buffer (for the bottleneck link) is filling up. If those goes on 
    for awhile without a dropped packet (because the buffer is large), 
    eventually any given packet may wait in the buffer for a long time 
    before actually being transmitted. Thus, the latency (the RTT) will 
    increase. On the other hand, if the buffer were smaller, eventually a 
    packet would be dropped and the cwnd would resize accordingly. You can 
    see this behavior occurring in the cwnd-iperf plots.
 2. The transmission queue length is 1000 packets. If we assume every packet
    is 1500 bytes and the queue drains at 100Mb per second, it follows that 
    the 1000th packet may have to wait for the transmission of 999 packets 
    before transmission. Thus, it would have to wait for the transmission of 
    1.4985 Mb ~ 1.5 Mb, which occurs in ~15ms.
 3. The RTT reported by ping varies with the cwnd. Thus, as the sawtooth goes
    up, the RTT increase (reflecting that the packets are spending longer and
    longer in buffers). We see that with the large buffer, the RTT increases
    in a sawtooth shape up to almost 250ms before dropping (and then increasing
    again). For the smaller buffer, the RTT varies from 20 to 50ms the whole
    time. The queue size (in packets) is similar in behavior, just scale-adjusted.
    Symbolically, we might say RTT ~ 2 * Q (where the RTT is in ms and the queue
    size Q is in packets).
 4. There are a few ways to combat buffer bloat (without just reducing your buffer).
    First, the network could send back information to the host when the buffer 
    contents reach a memory (that is, if the buffer is somewhat full). This info 
    would then (hopefully) cause the host to drop their cwnd and prevent further
    filling of the buffer. Another option might be for hosts to base their cwnd off
    of RTT measurements. If a host has a long-lived TCP flow, and the RTT is increasing
    as they increase cwnd, the host might realize this and stop increasing cwnd to 
    keep latency down. I think there are modifications of these approaches that may
    work as well (either modifying how buffers and queues are managed vs modifying
    how congestion control is managed at the host).

